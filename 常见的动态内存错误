#include <stdio.h>
#include <stdlib.h>
//常见的动态内存错误

int main()
{
	//1，对NULL指针的解引用
	int *p = (int*)malloc(40);//开辟十个int动态内存空间
	*p = 10;//如果malloc开辟空间失败-对NULL指针解引用

	//2.对开辟内存的越界访问
	int *p = (int*)malloc(40);
	if (p ==  NULL)
	{
		return 0;
	}
	int i = 0;
	//越界
	for (i = 0; i <=10; i++)
	{
		*(p + i) = i;
	}
	free(p);
	p = NULL;
	return 0;

	//3.对非动态内存使用free释放

	//4.使用free释放动态开辟内存的一部分
	int p = (int *)malloc(40);
	if (p == NULL)
	{
		return 0;
	}
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*p++ = i;
	}
	//回收空间
	free(p);
	p == NULL; 

	//5.对同一块动态内存的多次释放
	int p = (int *)malloc(40);
	if (p == NULL)
	{
		return 0;
	}
	//使用
	//释放
	free(p);

	//...

	free(p); 

	//动态开辟内存后忘记释放（内存泄漏）
	while (1)
	{
		malloc(1);
	}

		return 0;

}
